{"version":3,"sources":["model/enums.tsx","data/actions.ts","util/helpers.tsx","components/base/card.tsx","data/reducer.ts","data/state.ts","data/actionCreators.ts","data/resourceManager.ts","data/provider.tsx","data/util.ts","components/sidebar.tsx","util/axios.tsx","components/addAccountModal.tsx","components/base/button.tsx","components/stockAmountModal.tsx","components/addTransactionModal.tsx","components/transactionTable.tsx","pages/home.tsx","pages/login.tsx","data/navigationWrapper.tsx","App.js","reportWebVitals.js","index.js"],"names":["EntryStyle","AccountType","AccountCategory","SageActionType","allEntryStyles","CREDIT","DEBIT","allAccountTypes","CASH","INVESTMENT","LIABILITY","POINT","allAccountCategories","DAILY","SAVINGS","RETIREMENT","SPECIAL","prettifyEnum","string","s","toLowerCase","toUpperCase","slice","getAmountString","amount","isPoint","toLocaleString","maximumFractionDigits","Math","abs","minimumFractionDigits","months","formatDateForInput","dateNumber","date","Date","getFullYear","getMonth","getDate","Card","children","Container","className","NavigationState","sageReducer","state","action","type","NAVIGATE","navigationState","destination","SET_SUMMARY","netWorth","categoryValues","typeValues","SET_ACCOUNTS","accounts","SET_TRANSACTIONS","transactionTableView","transactions","navigate","setTransactions","BASE_AXIOS_CONFIG","baseURL","timeout","ResourceManager","dispatch","noAuthClient","authClient","authenticated","this","axios","create","existing_token","localStorage","getItem","createAuthClient","password","window","crypto","subtle","digest","TextEncoder","encode","then","digestedHash","hashHex","Array","from","Uint8Array","map","b","toString","padStart","join","console","log","post","login_sha","response","data","access_token","HOME","token","interceptors","request","use","config","headers","Authorization","setItem","get","lastUpdated","net_worth","category_sums","type_data","last_updated","body","accountId","account_id","normalizedTransactions","transaction","normalizedTransaction","id","Number","parseInt","entries","normalizeEntries","push","setAccounts","entry","JSON","parse","replaceAll","e","parseFloat","style","category","tags","description","SageContext","createContext","SageContextProvider","reducer","initialState","latestState","useRef","getState","useCallback","current","useReducer","undefined","useEnhancedReducer","LOGIN","value","resourceManager","Provider","useSageContext","context","useContext","Error","Sidebar","useState","showZeroValueAccounts","setShowZeroValueAccounts","useEffect","sidebar","selectAccount","transactionTable","getIconForCategory","Star","pointIcon","childAccountIcon","getIconForType","renderAccount","accountName","accountValue","isRemaining","isChildAccount","onClick","sortAccounts","a","is_remaining","floor","round","Object","categoryEntry","categoryValue","typeEntry","typeBlob","typeAccounts","typeValue","sum","filter","account","parent_account_id","sort","name","is_points","childAccount","client","AddAccountModal","visible","setVisible","newAccountName","setNewAccountName","newAccountType","setNewAccountType","newAccountCategory","setNewAccountCategory","newAccountMaxValue","setNewAccountMaxValue","newAccountParentAccountId","setNewAccountParentAccountId","clearState","Modal","open","onChange","event","target","parentAccountId","preventDefault","newAccountJson","reduce","total","maxValue","catch","exception","error","Button","text","StockAmountModal","setAmountCallback","symbol","setSymbol","quantity","setQuantity","unitPrice","setUnitPrice","AddTransactionModal","existingTransaction","transactionId","setTransactionId","newEntries","setNewEntries","newEntryId","setNewEntryId","defaultEntryValues","updateEntry","update","exisitngEntry","find","newEntry","index","newId","getNextEntryId","concat","removeEntry","updateEntryCallback","entryIds","fullEntries","newTransactionJson","earliestDate","currentDate","valueOf","formattedAmount","stringify","AddEntryRow","isStockType","setIsStockType","showStockAmountModal","setShowStockAmountModal","checked","newDefault","toggleAmountType","split","TransactionTable","addTransactionModalVisibility","setAddTransactionModalVisibility","transactionToEdit","setTransactionToEdit","renderAmount","renderTransaction","editTransaction","HomePage","addAccountModalVisibility","setAddAccountModalVisibilty","LoginPage","setPassword","login","NavigationWrapper","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29768a5a.chunk.js","sourcesContent":["export enum EntryStyle {\n    DEBIT,\n    CREDIT,\n}\n\nexport enum AccountType {\n    CASH,\n    INVESTMENT,\n    LIABILITY,\n    POINT,\n}\n\nexport enum AccountCategory {\n    DAILY,\n    SAVINGS,\n    RETIREMENT,\n    SPECIAL,\n}\n\nexport const allEntryStyles = [EntryStyle.CREDIT, EntryStyle.DEBIT];\nexport const allAccountTypes = [\n    AccountType.CASH,\n    AccountType.INVESTMENT,\n    AccountType.LIABILITY,\n    AccountType.POINT,\n];\nexport const allAccountCategories = [\n    AccountCategory.DAILY,\n    AccountCategory.SAVINGS,\n    AccountCategory.RETIREMENT,\n    AccountCategory.SPECIAL,\n];\n","import { Transaction } from '../types';\nimport { NavigationState } from './state';\n\nexport enum SageActionType {\n    NAVIGATE = 'NAVIGATE',\n    SET_SUMMARY = 'SET_SUMMARY',\n    SET_TRANSACTIONS = 'SET_TRANSACTIONS',\n    SET_ACCOUNTS = 'SET_ACCOUNTS',\n}\n\nexport interface NavigateAction {\n    type: SageActionType.NAVIGATE;\n    destination: NavigationState;\n}\n\nexport interface SetSummaryAction {\n    type: SageActionType.SET_SUMMARY;\n    netWorth: number;\n    categoryValues: any;\n    typeValues: any;\n    lastUpdated: Date;\n}\n\nexport interface SetTransactionsAction {\n    type: SageActionType.SET_TRANSACTIONS;\n    transactionTableView: string;\n    transactions: Transaction[];\n}\n\nexport interface SetAccountsAction {\n    type: SageActionType.SET_ACCOUNTS;\n    accounts: any[];\n}\n\nexport type SageActions =\n    | NavigateAction\n    | SetSummaryAction\n    | SetTransactionsAction\n    | SetAccountsAction;\n","import { StockAmount } from '../model/entry';\nimport { AccountType } from '../model/enums';\n\nexport const prettifyEnum = (string: string) => {\n    let s = string.toLowerCase();\n    return s[0].toUpperCase() + s.slice(1);\n};\n\nexport const getTypeColor = (type: AccountType) => {\n    if (type === AccountType.CASH) {\n        return '#E1B92B';\n    }\n    if (type === AccountType.LIABILITY) {\n        return '#574DC7';\n    }\n    if (type === AccountType.INVESTMENT) {\n        return '#5A8A0B';\n    }\n};\n\nexport const getStockAmountString = (amount: StockAmount) => {\n    return `${amount.quantity}x${amount.symbol} @ $${amount.unitPrice}`;\n};\n\nexport const getAmountString = (amount: number, isPoint: boolean) => {\n    return `\n    ${amount < 0 ? '-' : ''}${!isPoint ? '$' : ''}${\n        !isPoint\n            ? Math.abs(amount).toLocaleString('en-US', {\n                  maximumFractionDigits: 2,\n                  minimumFractionDigits: 2,\n              })\n            : amount.toLocaleString('en-US', { maximumFractionDigits: 0 })\n    }\n    `;\n};\n\nconst months = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sept',\n    'Oct',\n    'Nov',\n    'Dec',\n];\nexport const formatDate = (date: Date) => {\n    return `${date.getDate()} ${months[date.getMonth()]} ${date.getFullYear()}`;\n};\n\nexport const formatDateForInput = (dateNumber: Date | undefined) => {\n    let date = new Date();\n    if (dateNumber) {\n        date = dateNumber;\n    }\n    return `${date.getFullYear()}-${\n        date.getMonth() < 9 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1\n    }-${date.getDate() < 9 ? '0' + (date.getDate() + 1) : date.getDate() + 1}`;\n};\n","import { Container } from '@material-ui/core';\nimport { FunctionComponent } from 'react';\n\ntype CardProps = {};\n\nexport const Card: FunctionComponent<CardProps> = ({ children }) => {\n    return (\n        <Container className=\"card\">\n            <div className=\"card--holder\">{children}</div>\n        </Container>\n    );\n};\n","import { SageActions, SageActionType } from './actions';\nimport { SageState } from './state';\n\nexport const sageReducer = (\n    state: SageState,\n    action: SageActions\n): SageState => {\n    switch (action.type) {\n        case SageActionType.NAVIGATE:\n            return {\n                ...state,\n                navigationState: action.destination,\n            };\n        case SageActionType.SET_SUMMARY:\n            return {\n                ...state,\n                netWorth: action.netWorth,\n                categoryValues: action.categoryValues,\n                typeValues: action.typeValues,\n            };\n        case SageActionType.SET_ACCOUNTS:\n            return {\n                ...state,\n                accounts: action.accounts,\n            };\n        case SageActionType.SET_TRANSACTIONS:\n            return {\n                ...state,\n                transactionTableView: action.transactionTableView,\n                transactions: action.transactions,\n            };\n    }\n    return state;\n};\n","import { Transaction } from '../types';\n\nexport enum NavigationState {\n    LOGIN = 'LOGIN',\n    HOME = 'HOME',\n}\n\nexport interface SageState {\n    navigationState: NavigationState;\n    netWorth: number;\n    categoryValues: any;\n    typeValues: any;\n    transactions: Transaction[];\n    accounts: any[];\n    lastUpdated: Date;\n    transactionTableView: string;\n}\n\nexport const createInitialState = (): SageState => {\n    return {\n        navigationState: NavigationState.LOGIN,\n        netWorth: 0,\n        categoryValues: {},\n        typeValues: {},\n        transactions: [],\n        accounts: [],\n        lastUpdated: new Date(),\n        transactionTableView: '',\n    };\n};\n","import { Transaction } from '../types';\nimport {\n    NavigateAction,\n    SageActionType,\n    SetAccountsAction,\n    SetSummaryAction,\n    SetTransactionsAction,\n} from './actions';\nimport { NavigationState } from './state';\n\nexport const navigate = (destination: NavigationState): NavigateAction => ({\n    type: SageActionType.NAVIGATE,\n    destination: destination,\n});\n\nexport const setSummaryData = (\n    netWorth: number,\n    categoryValues: any,\n    typeValues: any,\n    lastUpdated: Date\n): SetSummaryAction => ({\n    type: SageActionType.SET_SUMMARY,\n    netWorth: netWorth,\n    categoryValues: categoryValues,\n    typeValues: typeValues,\n    lastUpdated: lastUpdated,\n});\n\nexport const setTransactions = (\n    transactions: Transaction[],\n    transactionTableView: string\n): SetTransactionsAction => ({\n    type: SageActionType.SET_TRANSACTIONS,\n    transactionTableView: transactionTableView,\n    transactions: transactions,\n});\n\nexport const setAccounts = (accounts: any[]): SetAccountsAction => ({\n    type: SageActionType.SET_ACCOUNTS,\n    accounts: accounts,\n});\n","import axios, { AxiosInstance } from 'axios';\nimport { EntryStyle } from '../model/enums';\nimport { Entry, EntryRaw, TransactionRaw } from '../types';\nimport {\n    navigate,\n    setAccounts,\n    setSummaryData,\n    setTransactions,\n} from './actionCreators';\nimport { Dispatch } from './provider';\nimport { NavigationState } from './state';\n\nconst BASE_AXIOS_CONFIG = {\n    baseURL: 'http://localhost:5000',\n    timeout: 100000,\n};\n\nexport class ResourceManager {\n    noAuthClient: AxiosInstance;\n    authClient: AxiosInstance | null;\n    dispatch: Dispatch;\n    authenticated: boolean;\n\n    constructor(dispatch: Dispatch) {\n        this.noAuthClient = axios.create(BASE_AXIOS_CONFIG);\n        this.authClient = null;\n        this.dispatch = dispatch;\n        this.authenticated = false;\n        const existing_token = localStorage.getItem('access_token');\n        if (existing_token && existing_token !== 'null') {\n            this.createAuthClient(existing_token);\n        }\n    }\n\n    login(password: string): void {\n        window.crypto.subtle\n            .digest('SHA-256', new TextEncoder().encode(password))\n            .then((digestedHash) => {\n                const hashArray = Array.from(new Uint8Array(digestedHash));\n                const hashHex = hashArray\n                    .map((b) => b.toString(16).padStart(2, '0'))\n                    .join('');\n                console.log(hashHex);\n                this.noAuthClient\n                    .post('/login', {\n                        login_sha: hashHex,\n                    })\n                    .then((response: any) => {\n                        this.createAuthClient(response.data.access_token);\n                        this.dispatch(navigate(NavigationState.HOME));\n                    });\n            });\n    }\n\n    createAuthClient(token: string): void {\n        this.authClient = axios.create(BASE_AXIOS_CONFIG);\n        this.authClient.interceptors.request.use((config: any) => {\n            config.headers.Authorization = `Bearer ${token}`;\n            return config;\n        });\n        localStorage.setItem('access_token', token);\n        this.authenticated = true;\n    }\n\n    sidebar() {\n        this.authClient?.get('/sidebar').then((response) => {\n            const data = response.data;\n            this.dispatch(\n                setSummaryData(\n                    data.net_worth,\n                    data.category_sums,\n                    data.type_data,\n                    new Date(data.last_updated)\n                )\n            );\n        });\n    }\n\n    transactionTable(accountId: string | null = null) {\n        let body;\n        if (accountId !== null) {\n            body = {\n                account_id: accountId,\n            };\n        }\n        this.authClient?.post('/transaction/table', body).then((response) => {\n            const transactions: TransactionRaw[] = response.data.transactions;\n            const normalizedTransactions = [];\n            for (let transaction of transactions) {\n                const normalizedTransaction = {\n                    id: transaction.id,\n                    date: new Date(Number.parseInt(transaction.date)),\n                    entries: this.normalizeEntries(transaction.entries),\n                };\n\n                normalizedTransactions.push(normalizedTransaction);\n            }\n            this.dispatch(\n                setTransactions(\n                    normalizedTransactions,\n                    accountId ? accountId : ''\n                )\n            );\n        });\n    }\n\n    accounts() {\n        this.authClient?.get('/modal/options').then((response) => {\n            this.dispatch(setAccounts(response.data.accounts));\n        });\n    }\n\n    normalizeEntries(entries: EntryRaw[]): Entry[] {\n        return entries.map((entry: EntryRaw) => {\n            let amount;\n            try {\n                amount = JSON.parse(entry.amount.replaceAll(\"'\", '\"'));\n            } catch (e) {\n                amount = Number.parseFloat(entry.amount);\n            }\n            return {\n                id: entry.id,\n                accountId: entry.account_id,\n                style: EntryStyle[entry.style as keyof typeof EntryStyle],\n                amount: amount,\n                date: new Date(Number.parseFloat(entry.date)),\n                category: entry.category,\n                tags: entry.tags ? entry.tags : [],\n                description: entry.description,\n            };\n        });\n    }\n}\n","import { createContext, FunctionComponent, useContext } from 'react';\nimport { SageActions } from './actions';\nimport { sageReducer } from './reducer';\nimport { ResourceManager } from './resourceManager';\nimport { createInitialState, SageState } from './state';\nimport { useEnhancedReducer } from './util';\n\nexport type Dispatch = (action: SageActions) => SageState;\n\ninterface SageContextContent {\n    resourceManager: ResourceManager;\n    state: SageState;\n    dispatch: Dispatch;\n}\n\nconst SageContext = createContext<SageContextContent | null>(null);\n\nexport const SageContextProvider: FunctionComponent = ({ children }) => {\n    const [state, dispatch] = useEnhancedReducer(\n        sageReducer,\n        createInitialState()\n    );\n    const resourceManager = new ResourceManager(dispatch);\n\n    const value = {\n        resourceManager: resourceManager,\n        state: state,\n        dispatch: dispatch,\n    };\n\n    return (\n        <SageContext.Provider value={value}>{children}</SageContext.Provider>\n    );\n};\n\nexport const useSageContext = (): SageContextContent => {\n    const context = useContext(SageContext);\n    if (context === null) {\n        throw new Error(\n            'SageContext must be used within a SageContextProvider'\n        );\n    }\n\n    return context;\n};\n","import { useRef, useCallback, useReducer } from 'react';\nimport { SageState } from './state';\n\nexport const useEnhancedReducer = (reducer: any, initialState: SageState) => {\n    const latestState = useRef(initialState);\n    const getState = useCallback(() => latestState.current, []);\n    const [state, dispatch] = useReducer(\n        (state: SageState, action: any) =>\n            (latestState.current = reducer(state, action)),\n        initialState,\n        undefined\n    );\n    return [state, dispatch, getState];\n};\n","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport MonetizationOnOutlinedIcon from '@material-ui/icons/MonetizationOnOutlined';\nimport LoyaltyOutlinedIcon from '@material-ui/icons/LoyaltyOutlined';\nimport AccountBalanceOutlinedIcon from '@material-ui/icons/AccountBalanceOutlined';\nimport CreditCardOutlinedIcon from '@material-ui/icons/CreditCardOutlined';\nimport PollOutlinedIcon from '@material-ui/icons/PollOutlined';\nimport HouseOutlinedIcon from '@material-ui/icons/HouseOutlined';\nimport LocalAtmOutlinedIcon from '@material-ui/icons/LocalAtmOutlined';\nimport SubdirectoryArrowRightOutlinedIcon from '@material-ui/icons/SubdirectoryArrowRightOutlined';\nimport { AccountCategory, AccountType } from '../model/enums';\nimport { Star } from '@material-ui/icons';\nimport '../styles/sidebar.scss';\nimport { getAmountString, prettifyEnum } from '../util/helpers';\nimport { Card } from './base/card';\nimport { useSageContext } from '../data/provider';\n\nexport const Sidebar: FunctionComponent = () => {\n    const { resourceManager, state } = useSageContext();\n    const [showZeroValueAccounts, setShowZeroValueAccounts] =\n        useState<boolean>(false);\n\n    useEffect(() => {\n        resourceManager.sidebar();\n    }, []);\n\n    const selectAccount = (accountId: string | null) => {\n        if (accountId && accountId === state.transactionTableView) {\n            resourceManager.transactionTable();\n        } else {\n            resourceManager.transactionTable(accountId);\n        }\n    };\n\n    const getIconForCategory = (category: AccountCategory) => {\n        if (category === AccountCategory.DAILY) {\n            return <LocalAtmOutlinedIcon className=\"daily\" />;\n        }\n        if (category === AccountCategory.SPECIAL) {\n            return <Star className=\"special\" />;\n        }\n        if (category === AccountCategory.SAVINGS) {\n            return <HouseOutlinedIcon className=\"savings\" />;\n        }\n        if (category === AccountCategory.RETIREMENT) {\n            return <AccountBalanceOutlinedIcon className=\"retirement\" />;\n        }\n    };\n\n    const pointIcon = <LoyaltyOutlinedIcon className=\"point\" />;\n    const childAccountIcon = (\n        <SubdirectoryArrowRightOutlinedIcon className=\"childAccount\" />\n    );\n\n    const getIconForType = (type: AccountType) => {\n        if (type === AccountType.CASH) {\n            return <MonetizationOnOutlinedIcon className=\"cash\" />;\n        }\n        if (type === AccountType.LIABILITY) {\n            return <CreditCardOutlinedIcon className=\"liability\" />;\n        }\n        if (type === AccountType.INVESTMENT) {\n            return <PollOutlinedIcon className=\"investment\" />;\n        }\n        if (type === AccountType.POINT) {\n            return <Star className=\"point\" />;\n        }\n    };\n\n    const renderAccount = (\n        accountId: string,\n        accountName: string,\n        accountValue: number,\n        isPoint: boolean,\n        isRemaining: boolean,\n        isChildAccount: boolean = false\n    ) => (\n        <>\n            {accountValue !== 0 || showZeroValueAccounts ? (\n                <div\n                    key={accountId}\n                    className={\n                        state.transactionTableView === accountId\n                            ? 'sidebar__accounts--account selected'\n                            : 'sidebar__accounts--account'\n                    }\n                    onClick={() => selectAccount(accountId)}\n                >\n                    <p>\n                        {isChildAccount ? childAccountIcon : null}\n                        {accountName}\n                    </p>\n                    <p>\n                        {accountValue < 0 ? (\n                            <span className=\"negative\">\n                                {getAmountString(accountValue, isPoint)}\n                            </span>\n                        ) : (\n                            getAmountString(accountValue, isPoint)\n                        )}\n                        {isRemaining ? (\n                            <span className=\"subtext\">rem.</span>\n                        ) : null}\n                        {isPoint ? pointIcon : null}\n                    </p>\n                </div>\n            ) : null}\n        </>\n    );\n\n    const getChildAccounts = (accountId: string, accounts: any[]) => {\n        return accounts.filter((account) => {\n            return account.parent_account_id === accountId;\n        });\n    };\n\n    const sortAccounts = (a: any, b: any) => {\n        if (a.is_remaining && !b.is_remaining) {\n            return 1;\n        }\n        if (!a.is_remaining && b.is_remaining) {\n            return -1;\n        }\n\n        return Math.abs(b.value) - Math.abs(a.value);\n    };\n\n    return (\n        <div className=\"sidebar\">\n            <Card>\n                <span\n                    className=\"sidebar__total\"\n                    onClick={() => selectAccount(null)}\n                >\n                    <h1>\n                        ${Math.floor(state.netWorth).toLocaleString('en-US')}\n                    </h1>\n                    <h2>\n                        .\n                        {Math.round(\n                            (state.netWorth - Math.floor(state.netWorth)) * 100\n                        ).toLocaleString('en-US')}\n                    </h2>\n                </span>\n            </Card>\n            <Card>\n                {Object.entries(state.categoryValues).map((categoryEntry) => {\n                    const categoryValue = Number.parseFloat(\n                        categoryEntry[1] as string\n                    );\n                    const category =\n                        AccountCategory[\n                            categoryEntry[0] as keyof typeof AccountCategory\n                        ];\n                    return (\n                        <div key={category} className=\"sidebar__category\">\n                            <h2>\n                                {getIconForCategory(category)}\n                                {prettifyEnum(AccountCategory[category])}\n                            </h2>\n                            <h2>\n                                {categoryValue < 0 ? (\n                                    <span className=\"negative\">\n                                        {getAmountString(\n                                            categoryValue,\n                                            category === AccountCategory.SPECIAL\n                                        )}\n                                        {category === AccountCategory.SPECIAL\n                                            ? pointIcon\n                                            : null}\n                                    </span>\n                                ) : (\n                                    <>\n                                        {getAmountString(\n                                            categoryValue,\n                                            category === AccountCategory.SPECIAL\n                                        )}\n                                        {category === AccountCategory.SPECIAL\n                                            ? pointIcon\n                                            : null}\n                                    </>\n                                )}\n                            </h2>\n                        </div>\n                    );\n                })}\n            </Card>\n            <div\n                onClick={() => setShowZeroValueAccounts(!showZeroValueAccounts)}\n            >\n                {showZeroValueAccounts ? '- Hide' : '+ Show'} net 0 accounts\n            </div>\n            {Object.entries(state.typeValues).map((typeEntry) => {\n                const typeBlob = typeEntry[1] as any;\n                const typeAccounts: any[] = typeBlob.accounts;\n                const type =\n                    AccountType[typeEntry[0] as keyof typeof AccountType];\n                const typeValue = typeBlob.sum;\n                return (\n                    <Card key={type}>\n                        <div className=\"sidebar__type\">\n                            <h2>\n                                {getIconForType(type)}\n                                {prettifyEnum(AccountType[type])}\n                            </h2>\n                            <h2>\n                                {typeValue < 0 ? (\n                                    <span className=\"negative\">\n                                        {getAmountString(typeValue, false)}\n                                    </span>\n                                ) : (\n                                    getAmountString(typeValue, false)\n                                )}\n                            </h2>\n                        </div>\n                        <div className=\"sidebar__accounts\">\n                            {typeAccounts\n                                .filter(\n                                    (account) =>\n                                        account.parent_account_id === null ||\n                                        account.parent_account_id === ''\n                                )\n                                .sort(sortAccounts)\n                                .map((account) => {\n                                    return (\n                                        <>\n                                            {renderAccount(\n                                                account.id,\n                                                account.name,\n                                                account.value,\n                                                account.is_points,\n                                                account.is_remaining,\n                                                false\n                                            )}\n                                            {getChildAccounts(\n                                                account.id,\n                                                typeAccounts\n                                            )\n                                                .sort(sortAccounts)\n                                                .map((childAccount) => {\n                                                    return renderAccount(\n                                                        childAccount.id,\n                                                        childAccount.name,\n                                                        childAccount.value,\n                                                        childAccount.is_points,\n                                                        childAccount.is_remaining,\n                                                        true\n                                                    );\n                                                })}\n                                        </>\n                                    );\n                                })}\n                        </div>\n                    </Card>\n                );\n            })}\n        </div>\n    );\n};\n","import axios from 'axios';\n\nexport const client = axios.create({\n    // Docker\n    baseURL: 'http://localhost:5000',\n    timeout: 10000,\n});\n\nexport const setAuthHeader = (token: string) => {\n    client.interceptors.request.use((config) => {\n        config.headers.Authorization = `Bearer ${token}`;\n        return config;\n    });\n};\n","import React, { FunctionComponent, useState } from 'react';\nimport { Button, Modal } from '@material-ui/core';\nimport {\n    AccountCategory,\n    AccountType,\n    allAccountCategories,\n    allAccountTypes,\n} from '../model/enums';\nimport { client } from '../util/axios';\nimport CloseOutlinedIcon from '@material-ui/icons/CloseOutlined';\nimport { prettifyEnum } from '../util/helpers';\nimport { Card } from './base/card';\nimport { useSageContext } from '../data/provider';\n\ntype AddAccountModalProps = {\n    visible: boolean;\n    setVisible: Function;\n};\n\nexport const AddAccountModal: FunctionComponent<AddAccountModalProps> = ({\n    visible,\n    setVisible,\n}) => {\n    const { state } = useSageContext();\n    const [newAccountName, setNewAccountName] = useState('');\n    const [newAccountType, setNewAccountType] = useState<AccountType>(\n        AccountType.CASH\n    );\n    const [newAccountCategory, setNewAccountCategory] =\n        useState<AccountCategory>(AccountCategory.DAILY);\n    const [newAccountMaxValue, setNewAccountMaxValue] = useState<\n        string | undefined\n    >(undefined);\n    const [newAccountParentAccountId, setNewAccountParentAccountId] = useState<\n        string | undefined\n    >(undefined);\n\n    const getNextId = (): string => {\n        const maxId = state.accounts\n            .map((account) => Number.parseInt(account.id))\n            .reduce((total, current) => {\n                if (current > total) {\n                    return current;\n                } else {\n                    return total;\n                }\n            }, 0);\n        return (maxId + 1).toString();\n    };\n\n    const addAccount = (event: any) => {\n        event.preventDefault();\n        const id = getNextId();\n        const newAccountJson = {\n            account: {\n                id: id,\n                name: newAccountName,\n                type: AccountType[newAccountType],\n                category: AccountCategory[newAccountCategory],\n                maxValue: newAccountMaxValue,\n                parentAccountId: newAccountParentAccountId,\n            },\n        };\n        client\n            .post('api/account', newAccountJson)\n            .then((response) => {\n                clearState();\n                setVisible(false);\n            })\n            .catch((exception) => {\n                console.error(exception);\n            });\n    };\n\n    const clearState = () => {\n        setNewAccountName('');\n        setNewAccountType(AccountType.CASH);\n        setNewAccountCategory(AccountCategory.DAILY);\n        setNewAccountMaxValue(undefined);\n        setNewAccountParentAccountId(undefined);\n    };\n\n    return (\n        <Modal className=\"modal\" open={visible}>\n            <div className=\"modal__content\">\n                <Card>\n                    <span className=\"modal__content--header\">\n                        <h1>New Account</h1>\n                        <Button onClick={() => setVisible(false)}>\n                            <CloseOutlinedIcon />\n                        </Button>\n                    </span>\n                    <span className=\"modal__content--input\">\n                        <span className=\"modal__content--input-required\">\n                            <h2>Name</h2>\n                            <p>*</p>\n                        </span>\n                        <input\n                            type=\"text\"\n                            value={newAccountName}\n                            onChange={(event) =>\n                                setNewAccountName(event.target.value)\n                            }\n                        ></input>\n                    </span>\n                    <span className=\"modal__content--input\">\n                        <span className=\"modal__content--input-required\">\n                            <h2>Type</h2>\n                            <p>*</p>\n                        </span>\n                        <select\n                            value={newAccountType}\n                            onChange={(event) =>\n                                setNewAccountType(\n                                    Number.parseInt(\n                                        event.target.value\n                                    ) as AccountType\n                                )\n                            }\n                        >\n                            {allAccountTypes.map((type) => (\n                                <option key={type} value={type}>\n                                    {prettifyEnum(AccountType[type])}\n                                </option>\n                            ))}\n                        </select>\n                    </span>\n                    <span className=\"modal__content--input\">\n                        <span className=\"modal__content--input-required\">\n                            <h2>Category</h2>\n                            <p>*</p>\n                        </span>\n                        <select\n                            value={newAccountCategory}\n                            onChange={(event) =>\n                                setNewAccountCategory(\n                                    Number.parseInt(\n                                        event.target.value\n                                    ) as AccountCategory\n                                )\n                            }\n                        >\n                            {allAccountCategories.map((category) => (\n                                <option key={category} value={category}>\n                                    {prettifyEnum(AccountCategory[category])}\n                                </option>\n                            ))}\n                        </select>\n                    </span>\n                    <span className=\"modal__content--input\">\n                        <h2>Max Value</h2>\n                        <input\n                            value={newAccountMaxValue}\n                            onChange={(event) =>\n                                setNewAccountMaxValue(event.target.value)\n                            }\n                            type=\"text\"\n                        ></input>\n                    </span>\n                    <span className=\"modal__content--input\">\n                        <h2>Parent Account</h2>\n                        <select\n                            value={newAccountParentAccountId}\n                            onChange={(event) =>\n                                setNewAccountParentAccountId(event.target.value)\n                            }\n                        >\n                            <option value=\"\">None</option>\n                            {state.accounts\n                                .filter((account) => !account.parentAccountId)\n                                .map((account) => (\n                                    <option key={account.id} value={account.id}>\n                                        {account.name}\n                                    </option>\n                                ))}\n                        </select>\n                    </span>\n                    <Button\n                        className=\"modal__content--submit\"\n                        onClick={addAccount}\n                    >\n                        <h2>Create</h2>\n                    </Button>\n                </Card>\n            </div>\n        </Modal>\n    );\n};\n","import React, { FunctionComponent } from 'react';\nimport '../../styles/button.scss';\n\ntype ButtonProps = {\n    text?: string;\n    onClick?: any;\n    className?: string;\n};\n\nexport const Button: FunctionComponent<ButtonProps> = ({\n    text,\n    onClick,\n    className,\n}) => {\n    return (\n        <button onClick={onClick} className={className}>\n            {text}\n        </button>\n    );\n};\n","import { Button, Modal } from '@material-ui/core';\nimport React, { FunctionComponent, useState } from 'react';\nimport { Card } from './base/card';\nimport CloseOutlinedIcon from '@material-ui/icons/CloseOutlined';\n\ntype StockAmountModalProps = {\n    visible: boolean;\n    setVisible: Function;\n    setAmountCallback: Function;\n};\n\nexport const StockAmountModal: FunctionComponent<StockAmountModalProps> = ({\n    visible,\n    setVisible,\n    setAmountCallback,\n}) => {\n    const [symbol, setSymbol] = useState('');\n    const [quantity, setQuantity] = useState(0.0);\n    const [unitPrice, setUnitPrice] = useState(0.0);\n\n    return (\n        <Modal className=\"modal\" open={visible}>\n            <div className=\"modal__content\">\n                <Card>\n                    <span className=\"modal__content--header\">\n                        <h1>Stock Amount</h1>\n                        <Button onClick={() => setVisible(false)}>\n                            <CloseOutlinedIcon />\n                        </Button>\n                    </span>\n                    <span className=\"modal__content--input\">\n                        <table>\n                            <thead>\n                                <td>\n                                    <h2>Symbol *</h2>\n                                </td>\n                                <td>\n                                    <h2>Quantity *</h2>\n                                </td>\n                                <td>\n                                    <h2>Unit Price*</h2>\n                                </td>\n                                <td></td>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <input\n                                            type=\"text\"\n                                            value={symbol}\n                                            onChange={(event) =>\n                                                setSymbol(event.target.value)\n                                            }\n                                        ></input>\n                                    </td>\n                                    <td>\n                                        <input\n                                            type=\"number\"\n                                            value={quantity}\n                                            onChange={(event) =>\n                                                setQuantity(\n                                                    Number.parseFloat(\n                                                        event.target.value\n                                                    )\n                                                )\n                                            }\n                                        ></input>\n                                    </td>\n                                    <td>\n                                        <input\n                                            type=\"number\"\n                                            value={unitPrice}\n                                            onChange={(event) =>\n                                                setUnitPrice(\n                                                    Number.parseFloat(\n                                                        event.target.value\n                                                    )\n                                                )\n                                            }\n                                        ></input>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </span>\n                    <Button\n                        className=\"modal__addAccount__content--submit\"\n                        onClick={() =>\n                            setAmountCallback({\n                                symbol: symbol,\n                                quantity: quantity,\n                                unitPrice: unitPrice,\n                            })\n                        }\n                    >\n                        <h2>Set Amount</h2>\n                    </Button>\n                </Card>\n            </div>\n        </Modal>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from 'react';\nimport { Account } from '../model/account';\nimport { Button, Modal } from '@material-ui/core';\nimport { allEntryStyles, EntryStyle } from '../model/enums';\nimport { client } from '../util/axios';\nimport CloseOutlinedIcon from '@material-ui/icons/CloseOutlined';\nimport { formatDateForInput, prettifyEnum } from '../util/helpers';\nimport { Card } from './base/card';\nimport { StockAmount } from '../model/entry';\nimport { StockAmountModal } from './stockAmountModal';\nimport { useSageContext } from '../data/provider';\nimport { Transaction, Entry, EntryRaw, TransactionRaw } from '../types';\n\ntype AddTransactionModalProps = {\n    visible: boolean;\n    setVisible: Function;\n    existingTransaction: Transaction | null;\n};\n\nexport const AddTransactionModal: FunctionComponent<\n    AddTransactionModalProps\n> = ({ visible, setVisible, existingTransaction }) => {\n    const { resourceManager, state } = useSageContext();\n    const [transactionId, setTransactionId] = useState<string>('');\n    const [newEntries, setNewEntries] = useState<Partial<Entry>[]>([]);\n\n    const [newEntryId, setNewEntryId] = useState<number>(0);\n\n    const getNextEntryId = () => {\n        const newId = newEntryId + 1;\n        setNewEntryId(newId);\n        return newId;\n    };\n\n    useEffect(() => {\n        resourceManager.accounts();\n    }, []);\n\n    useEffect(() => {\n        if (existingTransaction) {\n            setTransactionId(existingTransaction.id);\n            setNewEntries(existingTransaction.entries);\n        } else {\n            setTransactionId('creation');\n            setNewEntries([]);\n        }\n    }, [existingTransaction]);\n\n    const defaultEntryValues: Partial<Entry> = {\n        accountId: state.accounts[0]?.id,\n        style: EntryStyle.DEBIT,\n        amount: 0,\n        date: new Date(),\n        category: '',\n        tags: [],\n        description: '',\n    };\n\n    const addTransaction = (event: any) => {\n        event.preventDefault();\n        const transaction = {\n            id: transactionId,\n            entryIds: newEntries.map((entry) => entry?.id || '-1'),\n        };\n\n        const fullEntries = newEntries\n            .map((entry) => {\n                return { ...defaultEntryValues, ...entry };\n            })\n            .map((entry) => {\n                return entry as Entry;\n            });\n\n        const newTransactionJson = {\n            transaction: {\n                date: fullEntries\n                    .map((entry) => entry.date)\n                    .filter((date) => date !== undefined)\n                    .reduce((earliestDate, currentDate) =>\n                        earliestDate > currentDate ? currentDate : earliestDate\n                    )\n                    .valueOf()\n                    .toString(),\n            } as Partial<TransactionRaw>,\n            entries: fullEntries.map((entry) => {\n                let formattedAmount: string;\n                if (typeof entry.amount === 'number') {\n                    formattedAmount = entry.amount.toString();\n                } else {\n                    formattedAmount = JSON.stringify(entry.amount);\n                }\n\n                const newEntry: Partial<EntryRaw> = {\n                    account_id: entry.accountId,\n                    style: EntryStyle[entry.style].toString(),\n                    amount: formattedAmount,\n                    date: entry.date.valueOf().toString(),\n                    description: entry.description,\n                    category: entry.category,\n                    tags: entry.tags,\n                };\n\n                if (typeof entry.id !== 'number') {\n                    newEntry['id'] = entry.id;\n                }\n\n                return newEntry;\n            }),\n        };\n\n        if (existingTransaction) {\n            newTransactionJson['transaction']['id'] = transaction.id;\n        }\n\n        client\n            .post('/transaction', newTransactionJson)\n            .then((response) => {\n                clearState();\n                setVisible(false);\n            })\n            .catch((exception) => {\n                console.error(exception);\n            });\n    };\n\n    const clearState = () => {\n        setNewEntries([]);\n    };\n\n    const updateEntry = (update: any) => {\n        let exisitngEntry = newEntries.find((entry) => entry.id === update.id);\n        if (!exisitngEntry) {\n            update.id = getNextEntryId();\n            setNewEntries(newEntries.concat({ ...update }));\n        } else {\n            let newEntry = { ...exisitngEntry, ...update };\n            setNewEntries(\n                newEntries.map((entry, index) =>\n                    exisitngEntry?.id === entry.id ? newEntry : entry\n                )\n            );\n        }\n    };\n\n    const removeEntry = (newEntryId: string) => {\n        setNewEntries(\n            newEntries.filter((entry) => {\n                return entry.id !== newEntryId;\n            })\n        );\n    };\n\n    return (\n        <Modal className=\"modal\" open={visible}>\n            <div className=\"modal__content\">\n                <Card>\n                    <span className=\"modal__content--header\">\n                        <h1>New Transaction</h1>\n                        <Button onClick={() => setVisible(false)}>\n                            <CloseOutlinedIcon />\n                        </Button>\n                    </span>\n                    <span className=\"modal__content--input\">\n                        <table>\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <h2>Account *</h2>\n                                    </th>\n                                    <th>\n                                        <h2>Style *</h2>\n                                    </th>\n                                    <th>\n                                        <h2>Amount *</h2>\n                                    </th>\n                                    <th>\n                                        <h2>Date *</h2>\n                                    </th>\n                                    <th>\n                                        <h2>Category</h2>\n                                    </th>\n                                    <th>\n                                        <h2>Tags</h2>\n                                    </th>\n                                    <th>\n                                        <h2>Description</h2>\n                                    </th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {newEntries\n                                    .concat(defaultEntryValues)\n                                    .map((entry, index) => (\n                                        <AddEntryRow\n                                            key={index}\n                                            entry={entry}\n                                            updateEntryCallback={updateEntry}\n                                            accounts={state.accounts}\n                                            removeEntry={removeEntry}\n                                        />\n                                    ))}\n                            </tbody>\n                        </table>\n                    </span>\n                    <Button\n                        className=\"modal__addAccount__content--submit\"\n                        onClick={addTransaction}\n                    >\n                        <h2>Create</h2>\n                    </Button>\n                </Card>\n            </div>\n        </Modal>\n    );\n};\n\ntype AddEntryRowProps = {\n    entry: Partial<Entry>;\n    updateEntryCallback: Function;\n    accounts: Account[];\n    removeEntry: Function;\n};\n\nconst AddEntryRow: FunctionComponent<AddEntryRowProps> = ({\n    entry,\n    updateEntryCallback,\n    accounts,\n    removeEntry,\n}) => {\n    const [isStockType, setIsStockType] = useState(false);\n    const [showStockAmountModal, setShowStockAmountModal] = useState(false);\n\n    const toggleAmountType = () => {\n        if (!isStockType) {\n            setShowStockAmountModal(true);\n        }\n\n        if (entry.amount) {\n            const newDefault = !isStockType\n                ? { symbol: '', quantity: 0, unitPrice: 0 }\n                : 0;\n            updateEntryCallback({\n                id: entry.id,\n                amount: newDefault,\n            });\n        }\n\n        setIsStockType(!isStockType);\n    };\n\n    const setStockAmount = (amount: StockAmount) => {\n        setShowStockAmountModal(false);\n        updateEntryCallback({\n            id: entry.id,\n            amount: amount,\n        });\n    };\n\n    return (\n        <tr>\n            <td>\n                <select\n                    value={entry.accountId}\n                    onChange={(event) =>\n                        updateEntryCallback({\n                            id: entry.id,\n                            accountId: event.target.value,\n                        })\n                    }\n                >\n                    {accounts.map((account) => (\n                        <option key={account.id} value={account.id}>\n                            {(account as any).parent_account_id}-{account.name}\n                        </option>\n                    ))}\n                </select>\n            </td>\n            <td>\n                <select\n                    value={entry.style}\n                    onChange={(event) =>\n                        updateEntryCallback({\n                            id: entry.id,\n                            style: Number.parseInt(\n                                event.target.value\n                            ) as EntryStyle,\n                        })\n                    }\n                >\n                    {allEntryStyles.map((style) => (\n                        <option key={style} value={style}>\n                            {prettifyEnum(EntryStyle[style])}\n                        </option>\n                    ))}\n                </select>\n            </td>\n            <td>\n                <input\n                    type=\"checkbox\"\n                    checked={isStockType}\n                    onChange={() => toggleAmountType()}\n                />\n                {isStockType ? (\n                    <p>\n                        {(entry.amount as StockAmount)?.quantity?.toString() ||\n                            '?'}\n                        x{(entry.amount as StockAmount)?.symbol || '?'} @ $\n                        {(entry.amount as StockAmount)?.unitPrice || '?'}\n                    </p>\n                ) : (\n                    <input\n                        type=\"number\"\n                        value={entry.amount?.toString()}\n                        onChange={(event) =>\n                            updateEntryCallback({\n                                id: entry.id,\n                                amount: Number.parseFloat(event.target.value),\n                            })\n                        }\n                    />\n                )}\n                <StockAmountModal\n                    visible={showStockAmountModal}\n                    setVisible={setShowStockAmountModal}\n                    setAmountCallback={setStockAmount}\n                />\n            </td>\n            <td>\n                <input\n                    type=\"date\"\n                    value={formatDateForInput(entry.date)}\n                    onChange={(event) =>\n                        updateEntryCallback({\n                            id: entry.id,\n                            date: new Date(\n                                Date.parse(event.target.value).valueOf() +\n                                    144000\n                            ),\n                        })\n                    }\n                />\n            </td>\n            <td>\n                <input\n                    type=\"text\"\n                    value={entry.category}\n                    onChange={(event) =>\n                        updateEntryCallback({\n                            id: entry.id,\n                            category: event.target.value,\n                        })\n                    }\n                />\n            </td>\n            <td>\n                <input\n                    type=\"text\"\n                    value={entry.tags?.join(', ')}\n                    onChange={(event) =>\n                        updateEntryCallback({\n                            id: entry.id,\n                            tags: event.target.value.split(', '),\n                        })\n                    }\n                />\n            </td>\n            <td>\n                <input\n                    type=\"text\"\n                    value={entry.description}\n                    onChange={(event) =>\n                        updateEntryCallback({\n                            id: entry.id,\n                            description: event.target.value,\n                        })\n                    }\n                />\n            </td>\n            <td>\n                {entry.id ? (\n                    <Button onClick={() => removeEntry(entry.id)}>\n                        <CloseOutlinedIcon />\n                    </Button>\n                ) : null}\n            </td>\n        </tr>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from 'react';\nimport { EntryStyle } from '../model/enums';\nimport {\n    formatDate,\n    getAmountString,\n    getStockAmountString,\n} from '../util/helpers';\nimport { Card } from './base/card';\nimport '../styles/transactionTable.scss';\nimport { Button } from './base/button';\nimport { Entry, Transaction } from '../types';\nimport { useSageContext } from '../data/provider';\nimport { AddTransactionModal } from './addTransactionModal';\n\ntype TransactionTableProps = {};\n\nexport const TransactionTable: FunctionComponent<\n    TransactionTableProps\n> = () => {\n    const { resourceManager, state } = useSageContext();\n    const [addTransactionModalVisibility, setAddTransactionModalVisibility] =\n        useState<boolean>(false);\n    const [transactionToEdit, setTransactionToEdit] =\n        useState<Transaction | null>(null);\n\n    useEffect(() => {\n        resourceManager.transactionTable();\n    }, []);\n\n    const renderAmount = (entry: Entry) => {\n        if (typeof entry.amount === 'number') {\n            return getAmountString(entry.amount, false);\n        } else {\n            return getStockAmountString(entry.amount);\n        }\n    };\n\n    const sortTransactions = (a: Transaction, b: Transaction) => {\n        return b.date.valueOf() - a.date.valueOf();\n    };\n\n    const editTransaction = (transaction: Transaction) => {\n        setAddTransactionModalVisibility(true);\n        setTransactionToEdit(transaction);\n    };\n\n    const renderTransaction = (transaction: Transaction) => (\n        <Card>\n            <table\n                className=\"transaction-table\"\n                onClick={() => editTransaction(transaction)}\n            >\n                <tbody className=\"transaction-table__body\" key={transaction.id}>\n                    {transaction.entries.map((entry) => (\n                        <tr\n                            key={entry.id}\n                            className=\"transaction-table__body__row\"\n                        >\n                            <td className=\"transaction-table__body__row--category\">\n                                {entry.category ? (\n                                    <span className=\"bubble\">\n                                        {entry.category}\n                                    </span>\n                                ) : null}\n                            </td>\n                            <td className=\"transaction-table__body__row--account\">\n                                {\n                                    state.accounts.find(\n                                        (account) =>\n                                            account.id === entry.accountId\n                                    )?.name\n                                }\n                            </td>\n                            <td className=\"transaction-table__body__row--date\">\n                                {formatDate(entry.date)}\n                            </td>\n                            <td className=\"transaction-table__body__row--debit\">\n                                {entry.style === EntryStyle.DEBIT\n                                    ? renderAmount(entry)\n                                    : ''}\n                            </td>\n                            <td className=\"transaction-table__body__row--credit\">\n                                {entry.style === EntryStyle.CREDIT\n                                    ? `(${renderAmount(entry)})`\n                                    : ''}\n                            </td>\n                            <td className=\"transaction-table__body__row--description\">\n                                {entry.description}\n                            </td>\n                            <td className=\"transaction-table__body__row--tags\">\n                                {entry.tags}\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </Card>\n    );\n\n    return (\n        <>\n            <div className=\"control\">\n                <span className=\"control__filter\">filter</span>\n                <span className=\"control__expand\">expand</span>\n                <span className=\"control__add\">\n                    <Button\n                        text=\"add transaction\"\n                        onClick={() => setAddTransactionModalVisibility(true)}\n                    />\n                </span>\n            </div>\n            <table className=\"transaction-table\">\n                <thead className=\"transaction-table--header\">\n                    <tr>\n                        <td className=\"transaction-table--header-category\">\n                            category\n                        </td>\n                        <td className=\"transaction-table--header-account\">\n                            account\n                        </td>\n                        <td className=\"transaction-table--header-date\">date</td>\n                        <td className=\"transaction-table--header-debit\">\n                            debit\n                        </td>\n                        <td className=\"transaction-table--header-credit\">\n                            credit\n                        </td>\n                        <td className=\"transaction-table--header-description\">\n                            description\n                        </td>\n                        <td className=\"transaction-table--header-tags\">tags</td>\n                    </tr>\n                </thead>\n            </table>\n            {state.transactions.sort(sortTransactions).map((transaction) => {\n                return renderTransaction(transaction);\n            })}\n            <AddTransactionModal\n                visible={addTransactionModalVisibility}\n                setVisible={(visible: boolean) => {\n                    setAddTransactionModalVisibility(visible);\n                    if (visible === false) {\n                        setTransactionToEdit(null);\n                    }\n                }}\n                existingTransaction={transactionToEdit}\n            />\n        </>\n    );\n};\n","import React, { FunctionComponent, useState } from 'react';\nimport { Sidebar } from '../components/sidebar';\nimport SettingsOutlinedIcon from '@material-ui/icons/SettingsOutlined';\nimport { AddAccountModal } from '../components/addAccountModal';\nimport { Button } from '@material-ui/core';\nimport { TransactionTable } from '../components/transactionTable';\nimport { useSageContext } from '../data/provider';\n\nexport const HomePage: FunctionComponent = () => {\n    const { state } = useSageContext();\n    const [addAccountModalVisibility, setAddAccountModalVisibilty] =\n        useState<boolean>(false);\n\n    return (\n        <div className=\"app\">\n            <div className=\"app__header\">\n                <h1 className=\"app__header__text\">Sage</h1>\n                <p>Last Updated: {state.lastUpdated.toLocaleString()}</p>\n                <Button onClick={() => setAddAccountModalVisibilty(true)}>\n                    A<SettingsOutlinedIcon />\n                </Button>\n            </div>\n            <div className=\"app__content\">\n                <Sidebar />\n                <div className=\"app__content__main\">\n                    <TransactionTable />\n                </div>\n            </div>\n            <AddAccountModal\n                visible={addAccountModalVisibility}\n                setVisible={setAddAccountModalVisibilty}\n            />\n        </div>\n    );\n};\n","import { Button } from '@material-ui/core';\nimport { FunctionComponent, useEffect, useState } from 'react';\nimport { navigate } from '../data/actionCreators';\nimport { useSageContext } from '../data/provider';\nimport { NavigationState } from '../data/state';\n\nexport const LoginPage: FunctionComponent = () => {\n    const { resourceManager, dispatch } = useSageContext();\n    const [password, setPassword] = useState('');\n\n    const login = () => {\n        resourceManager.login(password);\n        setPassword('');\n    };\n\n    useEffect(() => {\n        if (resourceManager.authenticated) {\n            dispatch(navigate(NavigationState.HOME));\n        }\n    }, [dispatch, resourceManager]);\n\n    return (\n        <div className=\"app\">\n            <div className=\"app__header\">\n                <h1 className=\"app__header__text\">Sage</h1>\n            </div>\n            <div className=\"app__content\">\n                <div className=\"app__content__login\">\n                    <input\n                        type=\"password\"\n                        value={password}\n                        onChange={(event) => setPassword(event.target.value)}\n                    />\n                    <Button onClick={login}>Login</Button>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from 'react';\nimport { HomePage } from '../pages/home';\nimport { LoginPage } from '../pages/login';\nimport { useSageContext } from './provider';\nimport { NavigationState } from './state';\n\nexport const NavigationWrapper: FunctionComponent = () => {\n    const { state } = useSageContext();\n\n    return (\n        <>\n            {state.navigationState === NavigationState.LOGIN ? (\n                <LoginPage />\n            ) : null}\n            {state.navigationState === NavigationState.HOME ? (\n                <HomePage />\n            ) : null}\n        </>\n    );\n};\n","import { NavigationWrapper } from './data/navigationWrapper';\nimport { SageContextProvider } from './data/provider';\nimport './styles/App.scss';\nimport './styles/svg.scss';\n\nexport const App = () => {\n    return (\n        <SageContextProvider>\n            <NavigationWrapper />\n        </SageContextProvider>\n    );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}