{"version":3,"sources":["model/enums.tsx","util/helpers.tsx","components/base/card.tsx","util/axios.tsx","components/sidebar.tsx","model/account.tsx","model/entry.tsx","model/transaction.tsx","util/parser.tsx","components/addAccountModal.tsx","components/base/button.tsx","components/transactionTable.tsx","components/stockAmountModal.tsx","components/addTransactionModal.tsx","pages/home.tsx","pages/login.tsx","App.js","reportWebVitals.js","index.js"],"names":["EntryStyle","AccountType","AccountCategory","allEntryStyles","CREDIT","DEBIT","allAccountTypes","CASH","INVESTMENT","LIABILITY","POINT","allAccountCategories","DAILY","SAVINGS","RETIREMENT","SPECIAL","prettifyEnum","string","s","toLowerCase","toUpperCase","slice","getAmountString","amount","isPoint","toLocaleString","maximumFractionDigits","Math","abs","minimumFractionDigits","months","formatDateForInput","dateNumber","date","Date","getFullYear","getMonth","getDate","Card","children","Container","className","client","axios","create","baseURL","timeout","Sidebar","useState","netWorth","setNetWorth","categoryValues","setCategoryValues","typeValues","setTypeValues","useEffect","get","then","response","data","net_worth","category_sums","type_data","catch","error","console","log","getIconForCategory","category","Star","pointIcon","childAccountIcon","getIconForType","type","renderAccount","accountId","accountName","accountValue","isRemaining","isChildAccount","sortAccounts","a","b","is_remaining","value","floor","round","Object","entries","map","categoryEntry","categoryValue","Number","parseFloat","typeEntry","typeBlob","typeAccounts","accounts","typeValue","sum","filter","account","parent_account_id","sort","id","name","is_points","childAccount","Account","options","parentAccountId","maxValue","this","allEntries","entry","stockPrices","entrySum","reduce","total","current","getValue","allAccounts","Entry","style","tags","description","undefined","Error","multiplier","price","symbol","unitPrice","quantity","Transaction","entryIds","includes","parseAmount","amountString","asFloat","isNaN","replaceAll","amountRaw","JSON","parse","AddAccountModal","visible","setVisible","newAccountCallback","newAccountName","setNewAccountName","newAccountType","setNewAccountType","newAccountCategory","setNewAccountCategory","newAccountMaxValue","setNewAccountMaxValue","newAccountParentAccountId","setNewAccountParentAccountId","clearState","Modal","open","onClick","onChange","event","target","parseInt","preventDefault","toString","newAccount","newAccountJson","post","exception","Button","text","TransactionTable","transactions","renderAmount","updatedTransactionCallback","updatedEntryCallback","getAccount","transaction","getEntries","find","renderTransaction","StockAmountModal","setAmountCallback","setSymbol","setQuantity","setUnitPrice","AddTransactionModal","newTransactionCallback","newEntryCallback","existingTransaction","transactionId","setTransactionId","newEntries","setNewEntries","getNextTransactionId","useCallback","defaultEntryValues","valueOf","updateEntry","update","exisitngEntry","newEntry","index","concat","removeEntry","newEntryId","updateEntryCallback","fullEntries","newTransactionJson","formattedAmount","AddEntryRow","isStockType","setIsStockType","showStockAmountModal","setShowStockAmountModal","checked","newDefault","toggleAmountType","join","split","HomePage","setAccounts","setEntries","setTransactions","addAccountModalVisibility","setAddAccountModalVisibilty","addTransactionModalVisibility","setAddTransactionModalVisibility","forEach","push","accountRaw","AccountId","S","Name","Type","Category","ParentAccountId","MaxValue","accountFromDynamoDB","transactionRaw","TransactionId","EntryIds","SS","rawEntry","entryRaw","EntryId","Style","Amount","N","Tags","Description","entryFromDynamoDB","t","updatedEntries","updated","updatedEntry","length","LoginPage","setPage","password","setPassword","window","crypto","subtle","digest","TextEncoder","encode","digestedHash","hashHex","Array","from","Uint8Array","padStart","token","access_token","interceptors","request","use","config","headers","Authorization","App","page","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.33f36457.chunk.js","sourcesContent":["export enum EntryStyle {\n    DEBIT,\n    CREDIT\n}\n\nexport enum AccountType {\n    CASH,\n    INVESTMENT,\n    LIABILITY,\n    POINT\n}\n\nexport enum AccountCategory {\n    DAILY,\n    SAVINGS,\n    RETIREMENT,\n    SPECIAL\n}\n\nexport const allEntryStyles = [EntryStyle.CREDIT, EntryStyle.DEBIT];\nexport const allAccountTypes = [AccountType.CASH, AccountType.INVESTMENT, AccountType.LIABILITY, AccountType.POINT];\nexport const allAccountCategories = [AccountCategory.DAILY, AccountCategory.SAVINGS, AccountCategory.RETIREMENT, AccountCategory.SPECIAL];","import { StockAmount } from \"../model/entry\";\nimport { AccountType } from \"../model/enums\";\n\nexport const prettifyEnum = (string: string) => {\n    let s = string.toLowerCase();\n    return s[0].toUpperCase() + s.slice(1)\n}\n\nexport const getTypeColor = (type: AccountType) => {\n    if (type === AccountType.CASH) {\n        return \"#E1B92B\";\n    }\n    if (type === AccountType.LIABILITY) {\n        return \"#574DC7\";\n    }\n    if (type === AccountType.INVESTMENT) {\n        return \"#5A8A0B\";\n    }\n};\n\nexport const getStockAmountString = (amount: StockAmount) => {\n    return `${amount.quantity}x${amount.symbol} @ $${amount.unitPrice}`;\n}\n\nexport const getAmountString = (amount: number, isPoint: boolean) => {\n    return `\n    ${amount < 0 ? '-' : ''}${!isPoint ? '$' : ''}${!isPoint ?\n            Math.abs(amount).toLocaleString('en-US', { maximumFractionDigits: 2, minimumFractionDigits: 2 }) :\n            amount.toLocaleString('en-US', { maximumFractionDigits: 0 })\n        }\n    `\n}\n\nconst months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\nexport const formatDate = (date: Date) => {\n    return `${date.getDate()} ${months[date.getMonth()]} ${date.getFullYear()}`\n}\n\nexport const formatDateForInput = (dateNumber: number | undefined) => {\n    let date = new Date();\n    if (dateNumber) {\n        date = new Date(dateNumber);\n    }\n    return `${date.getFullYear()}-${date.getMonth() < 10 ? '0' + date.getMonth() : date.getMonth()}-${date.getDate() < 10 ? '0' + date.getDate() : date.getDate()}`\n}","import { Container } from \"@material-ui/core\"\nimport { FunctionComponent } from \"react\"\n\ntype CardProps = {\n\n}\n\nexport const Card: FunctionComponent<CardProps> = ({ children }) => {\n    return (\n        <Container className=\"card\">\n            <div className=\"card--holder\">\n                {children}\n            </div>\n        </Container>\n    )\n}","import axios from \"axios\";\n\nexport const client = axios.create({\n    // Docker\n    baseURL: \"http://localhost:5000\",\n    timeout: 10000\n})\n\nexport const setAuthHeader = (token: string) => {\n    client.interceptors.request.use((config) => {\n        config.headers.Authorization = `Bearer ${token}`;\n        return config;\n    });\n}","import React, { FunctionComponent, useEffect, useState } from \"react\"\nimport MonetizationOnOutlinedIcon from '@material-ui/icons/MonetizationOnOutlined';\nimport LoyaltyOutlinedIcon from '@material-ui/icons/LoyaltyOutlined';\nimport AccountBalanceOutlinedIcon from '@material-ui/icons/AccountBalanceOutlined'\nimport CreditCardOutlinedIcon from '@material-ui/icons/CreditCardOutlined';\nimport PollOutlinedIcon from '@material-ui/icons/PollOutlined';\nimport HouseOutlinedIcon from '@material-ui/icons/HouseOutlined';\nimport LocalAtmOutlinedIcon from '@material-ui/icons/LocalAtmOutlined';\nimport SubdirectoryArrowRightOutlinedIcon from '@material-ui/icons/SubdirectoryArrowRightOutlined';\nimport { AccountCategory, AccountType } from \"../model/enums\";\nimport { Star } from \"@material-ui/icons\";\nimport \"../styles/sidebar.scss\";\nimport { getAmountString, prettifyEnum } from \"../util/helpers\";\nimport { Card } from \"./base/card\";\nimport { client } from \"../util/axios\";\n\nexport const Sidebar: FunctionComponent = () => {\n    const [netWorth, setNetWorth] = useState<number>(0);\n    const [categoryValues, setCategoryValues] = useState({});\n    const [typeValues, setTypeValues] = useState({});\n\n    useEffect(() => {\n        client.get('/sidebar')\n            .then((response) => {\n                setNetWorth(response.data.net_worth);\n                setCategoryValues(response.data.category_sums)\n                setTypeValues(response.data.type_data)\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n    }, []);\n\n    const getIconForCategory = (category: AccountCategory) => {\n        if (category === AccountCategory.DAILY) {\n            return (<LocalAtmOutlinedIcon className=\"daily\" />)\n        }\n        if (category === AccountCategory.SPECIAL) {\n            return (<Star className=\"special\" />)\n        }\n        if (category === AccountCategory.SAVINGS) {\n            return (<HouseOutlinedIcon className=\"savings\" />)\n        }\n        if (category === AccountCategory.RETIREMENT) {\n            return (<AccountBalanceOutlinedIcon className=\"retirement\" />)\n        }\n    }\n\n    const pointIcon = (<LoyaltyOutlinedIcon className=\"point\" />);\n    const childAccountIcon = (<SubdirectoryArrowRightOutlinedIcon className=\"childAccount\" />);\n\n    const getIconForType = (type: AccountType) => {\n        if (type === AccountType.CASH) {\n            return (<MonetizationOnOutlinedIcon className=\"cash\" />)\n        }\n        if (type === AccountType.LIABILITY) {\n            return (<CreditCardOutlinedIcon className=\"liability\" />)\n        }\n        if (type === AccountType.INVESTMENT) {\n            return (<PollOutlinedIcon className=\"investment\" />)\n        }\n        if (type === AccountType.POINT) {\n            return (<Star className=\"point\" />)\n        }\n    }\n\n    const renderAccount = (accountId: number, accountName: string, accountValue: number, isPoint: boolean, isRemaining: boolean, isChildAccount: boolean = false) => (\n        <div key={accountId} className=\"sidebar__accounts--account\">\n            <p>\n                {\n                    isChildAccount ? childAccountIcon : null\n                }\n                {accountName}\n            </p>\n            <p>\n                {getAmountString(accountValue, isPoint)}\n                {\n                    isRemaining ? (\n                        <span className=\"subtext\">\n                            rem.\n                        </span>\n                    ) : null\n                }\n                {\n                    isPoint ? pointIcon : null\n                }\n            </p>\n        </div>\n    );\n\n    const getChildAccounts = (accountId: string, accounts: any[]) => {\n        return accounts.filter((account) => {\n            return account.parent_account_id === accountId\n        })\n    }\n\n    const sortAccounts = (a: any, b: any) => {\n        if (a.is_remaining && !b.is_remaining) {\n            return 1;\n        }\n        if (!a.is_remaining && b.is_remaining) {\n            return -1;\n        }\n\n        return Math.abs(b.value) - Math.abs(a.value);\n    }\n\n    return (\n        <div className=\"sidebar\" >\n            <Card>\n                <span className=\"sidebar__total\">\n                    <h1>${Math.floor(netWorth).toLocaleString('en-US')}</h1>\n                    <h2>.{\n                        Math.round((netWorth - Math.floor(netWorth)) * 100).toLocaleString('en-US')\n                    }\n                    </h2>\n                </span>\n            </Card>\n            <Card>\n                {\n                    Object.entries(categoryValues).map((categoryEntry) => {\n                        const categoryValue = Number.parseFloat(categoryEntry[1] as string);\n                        const category = AccountCategory[categoryEntry[0] as keyof typeof AccountCategory];\n                        return (\n                            <div key={category} className=\"sidebar__category\">\n                                <h2>\n                                    {getIconForCategory(category)}\n                                    {prettifyEnum(AccountCategory[category])}\n                                </h2>\n                                <h2>{\n                                    categoryValue < 0 ? (\n                                        <span className=\"negative\">\n                                            {\n                                                getAmountString(\n                                                    categoryValue,\n                                                    (category === AccountCategory.SPECIAL)\n                                                )\n                                            }\n                                            {\n                                                category === AccountCategory.SPECIAL ? pointIcon : null\n                                            }\n                                        </span>\n                                    ) :\n                                        (\n                                            <>\n                                                {\n                                                    getAmountString(\n                                                        categoryValue,\n                                                        (category === AccountCategory.SPECIAL)\n                                                    )\n                                                }\n                                                {\n                                                    category === AccountCategory.SPECIAL ? pointIcon : null\n                                                }\n                                            </>\n                                        )\n                                }</h2>\n                            </div>\n                        )\n                    })\n                }\n            </Card>\n            {\n                Object.entries(typeValues).map((typeEntry) => {\n                    const typeBlob = typeEntry[1] as any;\n                    const typeAccounts: any[] = typeBlob.accounts;\n                    const type = AccountType[typeEntry[0] as keyof typeof AccountType]\n                    const typeValue = typeBlob.sum;\n                    return (\n                        <Card key={type}>\n                            <div className=\"sidebar__type\">\n                                <h2>\n                                    {getIconForType(type)}\n                                    {prettifyEnum(AccountType[type])}\n                                </h2>\n                                <h2>\n                                    {\n                                        typeValue < 0 ? (\n                                            <span className=\"negative\">\n                                                {getAmountString(typeValue, false)}\n                                            </span>\n                                        ) :\n                                            getAmountString(typeValue, false)\n                                    }\n                                </h2>\n                            </div>\n                            <div className=\"sidebar__accounts\">\n                                {\n                                    typeAccounts.filter((account) => (account.parent_account_id === null || account.parent_account_id === '')).sort(sortAccounts).map((account) => {\n                                        return (\n                                            <>\n                                                {\n                                                    renderAccount(account.id, account.name, account.value, account.is_points, account.is_remaining, false)\n                                                }\n                                                {\n                                                    getChildAccounts(account.id, typeAccounts)\n                                                        .sort(sortAccounts)\n                                                        .map((childAccount) => {\n                                                            return renderAccount(childAccount.id, childAccount.name, childAccount.value, childAccount.is_points, childAccount.is_remaining, true);\n                                                        })\n                                                }\n                                            </>\n                                        )\n                                    })\n\n                                }\n                            </div>\n                        </Card>\n                    )\n                })\n            }\n        </div>\n    )\n}","import { Entry } from \"./entry\";\nimport { AccountCategory, AccountType } from \"./enums\";\n\nexport interface AccountOptions {\n    id: string;\n    name: string;\n    type: AccountType;\n    category: AccountCategory;\n    parentAccountId?: string;\n    maxValue?: number;\n}\n\nexport class Account implements AccountOptions {\n\n    constructor(options: AccountOptions) {\n        this.id = options.id;\n        this.name = options.name;\n        this.type = options.type;\n        this.category = options.category;\n        this.parentAccountId = options.parentAccountId;\n        this.maxValue = options.maxValue;\n    }\n\n    id: string;\n    name: string;\n    type: AccountType;\n    category: AccountCategory;\n    parentAccountId: string | undefined;\n    maxValue: number | undefined;\n\n    getEntries(allEntries: Entry[]) {\n        return allEntries.filter((entry) => entry.accountId === this.id)\n    }\n\n    getValue(allEntries: Entry[], date: Date = new Date(), stockPrices?: any) {\n        const entrySum = allEntries\n            .filter((entry) => entry.accountId === this.id)\n            .reduce((total: number, current: Entry) => total + current.getValue(date, stockPrices), 0);\n        return this.maxValue ? this.maxValue - entrySum : entrySum;\n    }\n\n    getChildAccounts(allAccounts: Account[]) {\n        return allAccounts.filter((account) => account.parentAccountId && account.parentAccountId === this.id)\n    }\n}","import { Account } from \"./account\";\nimport { EntryStyle } from \"./enums\";\n\nexport interface EntryOptions {\n    id?: string;\n    accountId?: string;\n    style?: EntryStyle;\n    amount?: number | StockAmount;\n    date?: number;\n    category?: string;\n    tags?: string[];\n    description?: string;\n}\n\nexport interface StockAmount {\n    quantity: number;\n    symbol: string;\n    unitPrice: number;\n}\n\nexport class Entry implements EntryOptions {\n\n    constructor(options: EntryOptions) {\n        if (!options.id || !options.accountId || options.style === undefined || options.amount === undefined || options.date === undefined) {\n            throw new Error(``);\n        }\n\n        this.id = options.id;\n        this.accountId = options.accountId;\n        this.style = options.style;\n        this.amount = options.amount;\n        this.date = options.date;\n        this.category = options.category;\n        this.tags = options.tags;\n        this.description = options.description;\n    }\n\n    id: string;\n    accountId: string;\n    style: EntryStyle;\n    amount: number | StockAmount;\n    date: number;\n    category?: string | undefined;\n    tags?: string[] | undefined;\n    description?: string | undefined;\n\n    getValue(date: Date, stockPrices?: any) {\n        // Return for date before this entry took place\n        if (date < new Date(this.date)) {\n            return 0;\n        }\n\n        const multiplier = (this.style === EntryStyle.CREDIT) ? -1 : 1;\n\n        if (typeof this.amount === 'number') {\n            return multiplier * this.amount;\n        } else {\n            // TODO update to reflect appreciation of ticket\n            const price = (stockPrices && stockPrices[this.amount.symbol] !== undefined) ? stockPrices[this.amount.symbol] : this.amount.unitPrice;\n            return multiplier * this.amount.quantity * price;\n        }\n    }\n\n    getAccount(accounts: Account[]) {\n        return accounts.filter((account) => account.id === this.id)[0];\n    }\n\n}","import { Entry } from \"./entry\";\n\nexport interface TransactionOptions {\n    id: string;\n    entryIds: string[];\n}\n\nexport class Transaction implements TransactionOptions {\n\n    constructor(options: TransactionOptions) {\n        this.id = options.id;\n        this.entryIds = options.entryIds;\n    }\n\n    id: string;\n    entryIds: string[];\n\n    getEntries(entries: Entry[]) {\n        return entries.filter((entry) => this.entryIds.includes(entry.id))\n    }\n}","import { Account } from \"../model/account\";\nimport { Entry, StockAmount } from \"../model/entry\";\nimport { AccountCategory, AccountType, EntryStyle } from \"../model/enums\";\nimport { Transaction } from \"../model/transaction\";\n\nexport const accountFromDynamoDB = (accountRaw: any): Account => {\n    return new Account({\n        id: accountRaw.AccountId.S,\n        name: accountRaw.Name.S,\n        type: AccountType[accountRaw.Type.S as keyof typeof AccountType],\n        category: AccountCategory[accountRaw.Category?.S as keyof typeof AccountCategory],\n        parentAccountId: accountRaw.ParentAccountId?.S,\n        maxValue: Number.parseFloat(accountRaw.MaxValue?.S)\n    })\n}\n\nexport const entryFromDynamoDB = (entryRaw: any): Entry => {\n    return new Entry({\n        id: entryRaw.EntryId.S,\n        accountId: entryRaw.AccountId.S,\n        style: EntryStyle[entryRaw.Style.S as keyof typeof EntryStyle],\n        amount: parseAmount(entryRaw.Amount.S),\n        date: Number.parseInt(entryRaw.Date.N),\n        category: entryRaw.Category?.S,\n        tags: entryRaw.Tags?.SS,\n        description: entryRaw.Description?.S,\n    })\n}\n\nexport const transactionFromDynamoDB = (transactionRaw: any): Transaction => {\n    return new Transaction({\n        id: transactionRaw.TransactionId.S,\n        entryIds: transactionRaw.EntryIds.SS\n    })\n}\n\nconst parseAmount = (amountString: string): number | StockAmount => {\n    const asFloat = Number.parseFloat(amountString);\n    if (!isNaN(asFloat)) {\n        return asFloat;\n    } else {\n        amountString = amountString.replaceAll(\"'\", \"\\\"\");\n        const amountRaw = JSON.parse(amountString);\n        return {\n            quantity: Number.parseFloat(amountRaw.quantity),\n            unitPrice: Number.parseFloat(amountRaw.unitPrice),\n            symbol: amountRaw.symbol\n        };\n    }\n}","import React, { FunctionComponent, useState } from \"react\";\nimport { Account } from \"../model/account\";\nimport { Button, Modal } from \"@material-ui/core\";\nimport { AccountCategory, AccountType, allAccountCategories, allAccountTypes } from \"../model/enums\";\nimport { client } from \"../util/axios\";\nimport CloseOutlinedIcon from '@material-ui/icons/CloseOutlined';\nimport { prettifyEnum } from \"../util/helpers\";\nimport { Card } from \"./base/card\";\n\ntype AddAccountModalProps = {\n    visible: boolean,\n    setVisible: Function,\n    accounts: Account[],\n    newAccountCallback: Function\n}\n\nexport const AddAccountModal: FunctionComponent<AddAccountModalProps> = ({ visible, setVisible, accounts, newAccountCallback }) => {\n    const [newAccountName, setNewAccountName] = useState('');\n    const [newAccountType, setNewAccountType] = useState<AccountType>(AccountType.CASH);\n    const [newAccountCategory, setNewAccountCategory] = useState<AccountCategory>(AccountCategory.DAILY);\n    const [newAccountMaxValue, setNewAccountMaxValue] = useState<string | undefined>(undefined);\n    const [newAccountParentAccountId, setNewAccountParentAccountId] = useState<string | undefined>(undefined);\n\n    const getNextId = (): string => {\n        const maxId = accounts\n            .map((account) => Number.parseInt(account.id))\n            .reduce((total, current) => {\n                if (current > total) {\n                    return current;\n                } else {\n                    return total;\n                }\n            }, 0)\n        return (maxId + 1).toString()\n    }\n\n    const addAccount = (event: any) => {\n        event.preventDefault()\n        const id = getNextId()\n        let newAccount: Account = new Account({\n            id: id,\n            name: newAccountName,\n            type: newAccountType,\n            category: newAccountCategory,\n            maxValue: newAccountMaxValue ? Number.parseFloat(newAccountMaxValue) : undefined,\n            parentAccountId: newAccountParentAccountId\n        });\n        const newAccountJson = {\n            account: {\n                id: id,\n                name: newAccountName,\n                type: AccountType[newAccountType],\n                category: AccountCategory[newAccountCategory],\n                maxValue: newAccountMaxValue,\n                parentAccountId: newAccountParentAccountId\n            }\n        };\n        client.post(\"/account\", newAccountJson).then((response) => {\n            clearState();\n            setVisible(false);\n            newAccountCallback(newAccount);\n        }).catch((exception) => {\n            console.error(exception);\n        });\n    }\n\n    const clearState = () => {\n        setNewAccountName('');\n        setNewAccountType(AccountType.CASH);\n        setNewAccountCategory(AccountCategory.DAILY);\n        setNewAccountMaxValue(undefined);\n        setNewAccountParentAccountId(undefined);\n    }\n\n    return (\n        <Modal\n            className=\"modal\"\n            open={visible}\n        >\n            <div className=\"modal__content\">\n                <Card>\n                    <span className=\"modal__content--header\">\n                        <h1>New Account</h1>\n                        <Button onClick={() => setVisible(false)}><CloseOutlinedIcon /></Button>\n                    </span>\n                    <span className=\"modal__content--input\">\n                        <span className=\"modal__content--input-required\">\n                            <h2>Name</h2>\n                            <p>*</p>\n                        </span>\n                        <input type=\"text\" value={newAccountName} onChange={(event) => setNewAccountName(event.target.value)}></input>\n                    </span>\n                    <span className=\"modal__content--input\">\n                        <span className=\"modal__content--input-required\">\n                            <h2>Type</h2>\n                            <p>*</p>\n                        </span>\n                        <select value={newAccountType} onChange={(event) => setNewAccountType(Number.parseInt(event.target.value) as AccountType)}>\n                            {\n                                allAccountTypes.map((type) => (\n                                    <option key={type} value={type}>{prettifyEnum(AccountType[type])}</option>\n                                ))\n                            }\n                        </select>\n                    </span>\n                    <span className=\"modal__content--input\">\n                        <span className=\"modal__content--input-required\">\n                            <h2>Category</h2>\n                            <p>*</p>\n                        </span>\n                        <select value={newAccountCategory} onChange={(event) => setNewAccountCategory(Number.parseInt(event.target.value) as AccountCategory)}>\n                            {\n                                allAccountCategories.map((category) => (\n                                    <option key={category} value={category}>{prettifyEnum(AccountCategory[category])}</option>\n                                ))\n                            }\n                        </select>\n                    </span>\n                    <span className=\"modal__content--input\">\n                        <h2>Max Value</h2>\n                        <input value={newAccountMaxValue} onChange={(event) => setNewAccountMaxValue(event.target.value)} type=\"text\"></input>\n                    </span>\n                    <span className=\"modal__content--input\">\n                        <h2>Parent Account</h2>\n                        <select value={newAccountParentAccountId} onChange={(event) => setNewAccountParentAccountId(event.target.value)}>\n                            <option value=\"\">None</option>\n                            {\n                                accounts\n                                    .filter((account) => !account.parentAccountId)\n                                    .map((account) => (\n                                        <option key={account.id} value={account.id}>{account.name}</option>\n                                    ))\n                            }\n                        </select>\n                    </span>\n                    <Button className=\"modal__content--submit\" onClick={addAccount}><h2>Create</h2></Button>\n                </Card>\n            </div>\n        </Modal >\n    );\n}","import React, { FunctionComponent } from \"react\";\nimport \"../../styles/button.scss\";\n\ntype ButtonProps = {\n    text?: string,\n    onClick?: any,\n    className?: string\n}\n\nexport const Button: FunctionComponent<ButtonProps> = ({ text, onClick, className }) => {\n    return (\n        <button onClick={onClick} className={className}>{text}</button>\n    );\n}","import React, { FunctionComponent } from \"react\";\nimport { Account } from \"../model/account\";\nimport { Entry } from \"../model/entry\";\nimport { AccountType, EntryStyle } from \"../model/enums\";\nimport { Transaction } from \"../model/transaction\";\nimport { formatDate, getAmountString, getStockAmountString } from \"../util/helpers\";\nimport { Card } from \"./base/card\";\nimport \"../styles/transactionTable.scss\";\nimport { Button } from \"./base/button\";\n\ntype TransactionTableProps = {\n    accounts: Account[],\n    entries: Entry[],\n    transactions: Transaction[],\n    updatedEntryCallback: Function\n    updatedTransactionCallback: Function,\n}\n\nexport const TransactionTable: FunctionComponent<TransactionTableProps> = ({ accounts, transactions, entries, updatedTransactionCallback, updatedEntryCallback }) => {\n\n    const renderAmount = (entry: Entry) => {\n        if (typeof entry.amount === 'number') {\n            return getAmountString(Math.abs(entry.getValue(new Date(entry.date))), entry.getAccount(accounts)?.type === AccountType.POINT);\n        } else {\n            return getStockAmountString(entry.amount);\n        }\n    }\n\n    const renderTransaction = (transaction: Transaction) => (\n        <Card>\n            <table className=\"transaction-table\">\n                <tbody className=\"transaction-table__body\" key={transaction.id}>\n                    {\n                        transaction.getEntries(entries).map((entry) => (\n                            <tr key={entry.id} className=\"transaction-table__body__row\" >\n                                <td className=\"transaction-table__body__row--category\">{entry.category ? (<span className=\"bubble\">{entry.category}</span>) : null}</td>\n                                <td className=\"transaction-table__body__row--account\">{accounts.find((account) => account.id === entry.accountId)?.name}</td>\n                                <td className=\"transaction-table__body__row--date\">{formatDate(new Date(entry.date))}</td>\n                                <td className=\"transaction-table__body__row--debit\">{entry.style === EntryStyle.DEBIT ? renderAmount(entry) : ''}</td>\n                                <td className=\"transaction-table__body__row--credit\">{entry.style === EntryStyle.CREDIT ? `(${renderAmount(entry)})` : ''}</td>\n                                <td className=\"transaction-table__body__row--description\">{entry.description}</td>\n                                <td className=\"transaction-table__body__row--tags\">{entry.tags}</td>\n                            </tr>\n                        ))\n                    }\n                </tbody>\n            </table>\n        </Card >\n    );\n\n    return (\n        <>\n            <div className=\"control\">\n                <span className=\"control__filter\">filter</span>\n                <span className=\"control__expand\">expand</span>\n                <span className=\"control__add\"><Button text=\"add transaction\" /></span>\n            </div>\n            <table className=\"transaction-table\">\n                <thead className=\"transaction-table--header\">\n                    <tr>\n                        <td className=\"transaction-table--header-category\">category</td>\n                        <td className=\"transaction-table--header-account\">account</td>\n                        <td className=\"transaction-table--header-date\">date</td>\n                        <td className=\"transaction-table--header-debit\">debit</td>\n                        <td className=\"transaction-table--header-credit\">credit</td>\n                        <td className=\"transaction-table--header-description\">description</td>\n                        <td className=\"transaction-table--header-tags\">tags</td>\n                    </tr>\n                </thead>\n            </table>\n            {\n                transactions.map((transaction) => {\n                    return renderTransaction(transaction);\n                })\n            }\n        </>\n    );\n}\n\n","import { Button, Modal } from \"@material-ui/core\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { Card } from \"./base/card\";\nimport CloseOutlinedIcon from '@material-ui/icons/CloseOutlined';\n\ntype StockAmountModalProps = {\n    visible: boolean,\n    setVisible: Function,\n    setAmountCallback: Function\n}\n\nexport const StockAmountModal: FunctionComponent<StockAmountModalProps> = ({ visible, setVisible, setAmountCallback }) => {\n    const [symbol, setSymbol] = useState(\"\");\n    const [quantity, setQuantity] = useState(0.0);\n    const [unitPrice, setUnitPrice] = useState(0.0);\n\n    return (\n        <Modal\n            className=\"modal\"\n            open={visible}\n        >\n            <div className=\"modal__content\">\n                <Card>\n                    <span className=\"modal__content--header\">\n                        <h1>Stock Amount</h1>\n                        <Button onClick={() => setVisible(false)}><CloseOutlinedIcon /></Button>\n                    </span>\n                    <span className=\"modal__content--input\">\n                        <table>\n                            <thead>\n                                <td><h2>Symbol *</h2></td>\n                                <td><h2>Quantity *</h2></td>\n                                <td><h2>Unit Price*</h2></td>\n                                <td></td>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <input type=\"text\" value={symbol} onChange={(event) => setSymbol(event.target.value)}></input>\n                                    </td>\n                                    <td>\n                                        <input type=\"number\" value={quantity} onChange={(event) => setQuantity(Number.parseFloat(event.target.value))}></input>\n                                    </td>\n                                    <td>\n                                        <input type=\"number\" value={unitPrice} onChange={(event) => setUnitPrice(Number.parseFloat(event.target.value))}></input>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </span>\n                    <Button className=\"modal__addAccount__content--submit\" onClick={() => setAmountCallback({ symbol: symbol, quantity: quantity, unitPrice: unitPrice })}><h2>Set Amount</h2></Button>\n                </Card>\n            </div>\n        </Modal >\n    );\n}","import React, { FunctionComponent, useCallback, useEffect, useState } from \"react\";\nimport { Account } from \"../model/account\";\nimport { Button, Modal } from \"@material-ui/core\";\nimport { allEntryStyles, EntryStyle } from \"../model/enums\";\nimport { client } from \"../util/axios\";\nimport CloseOutlinedIcon from '@material-ui/icons/CloseOutlined';\nimport { formatDateForInput, prettifyEnum } from \"../util/helpers\";\nimport { Card } from \"./base/card\";\nimport { Entry, StockAmount } from \"../model/entry\";\nimport { Transaction } from \"../model/transaction\";\nimport { StockAmountModal } from \"./stockAmountModal\";\n\ntype AddTransactionModalProps = {\n    visible: boolean,\n    setVisible: Function,\n    accounts: Account[],\n    entries: Entry[],\n    transactions: Transaction[],\n    newTransactionCallback: Function,\n    newEntryCallback: Function,\n    existingTransaction?: Transaction\n}\n\nexport const AddTransactionModal: FunctionComponent<AddTransactionModalProps> = ({ visible, setVisible, accounts, entries, transactions, newTransactionCallback, newEntryCallback, existingTransaction }) => {\n    const [transactionId, setTransactionId] = useState<string>(\"\");\n    const [newEntries, setNewEntries] = useState<Partial<Entry>[]>([]);\n\n    const getNextTransactionId = useCallback((): string => {\n        const maxId = transactions\n            .map((account) => Number.parseInt(account.id))\n            .reduce((total, current) => {\n                if (current > total) {\n                    return current;\n                } else {\n                    return total;\n                }\n            }, 0)\n        return (maxId + 1).toString()\n    }, [transactions]);\n\n    useEffect(() => {\n        if (existingTransaction) {\n            setTransactionId(existingTransaction.id);\n            setNewEntries(existingTransaction.getEntries(entries));\n        } else {\n            setTransactionId(getNextTransactionId());\n        }\n    }, [existingTransaction, entries, getNextTransactionId]);\n\n    const defaultEntryValues: Partial<Entry> = {\n        accountId: accounts[0]?.id,\n        style: EntryStyle.DEBIT,\n        amount: 0,\n        date: new Date().valueOf(),\n        category: '',\n        tags: [],\n        description: ''\n    }\n\n    const getNextEntryId = (): string => {\n        const maxId = entries\n            .map((entry) => Number.parseInt(entry.id))\n            .concat(newEntries.map((newEntry) => Number.parseInt(newEntry?.id ? newEntry.id : \"-1\")))\n            .reduce((total, current) => {\n                if (current > total) {\n                    return current;\n                } else {\n                    return total;\n                }\n            }, 0)\n        return (maxId + 1).toString()\n    }\n\n    const addTransaction = (event: any) => {\n        event.preventDefault();\n        const transaction = new Transaction({\n            id: transactionId,\n            entryIds: newEntries.map((entry) => entry?.id || \"-1\")\n        });\n\n        const fullEntries = newEntries\n            .map((entry) => { return { ...defaultEntryValues, ...entry } })\n            .map((entry) => new Entry(entry));\n\n        const newTransactionJson = {\n            transaction: {\n                id: transaction.id,\n                entryIds: transaction.entryIds\n            },\n            entries: fullEntries\n                .map((entry) => {\n                    let formattedAmount;\n                    if (typeof entry.amount === 'number') {\n                        formattedAmount = entry.amount.toString()\n                    } else {\n                        formattedAmount = entry.amount;\n                    }\n                    return {\n                        id: entry.id,\n                        accountId: entry.accountId,\n                        style: EntryStyle[entry.style],\n                        amount: formattedAmount,\n                        date: entry.date.toString(),\n                        description: entry.description,\n                        category: entry.category,\n                        tags: entry.tags\n                    }\n                })\n        }\n\n        client.post(\"/transaction\", newTransactionJson).then((response) => {\n            clearState();\n            setVisible(false);\n            newEntryCallback(fullEntries);\n            newTransactionCallback(transaction);\n        }).catch((exception) => {\n            console.error(exception);\n        });\n    }\n\n    const clearState = () => {\n        setNewEntries([]);\n    }\n\n    const updateEntry = (update: any) => {\n        let exisitngEntry = newEntries.find((entry) => entry.id === update.id);\n        if (!exisitngEntry) {\n            update.id = getNextEntryId();\n            setNewEntries(newEntries.concat({ ...update }));\n        } else {\n            let newEntry = { ...exisitngEntry, ...update };\n            setNewEntries(newEntries.map((entry, index) => exisitngEntry?.id === entry.id ? newEntry : entry))\n        }\n    }\n\n    const removeEntry = (newEntryId: string) => {\n        setNewEntries(newEntries\n            .filter((entry) => {\n                return entry.id !== newEntryId\n            })\n        );\n    }\n\n    return (\n        <Modal\n            className=\"modal\"\n            open={visible}\n        >\n            <div className=\"modal__content\">\n                <Card>\n                    <span className=\"modal__content--header\">\n                        <h1>New Transaction</h1>\n                        <Button onClick={() => setVisible(false)}><CloseOutlinedIcon /></Button>\n                    </span>\n                    <span className=\"modal__content--input\">\n                        <table>\n                            <thead>\n                                <tr>\n                                    <th><h2>Account *</h2></th>\n                                    <th><h2>Style *</h2></th>\n                                    <th><h2>Amount *</h2></th>\n                                    <th><h2>Date *</h2></th>\n                                    <th><h2>Category</h2></th>\n                                    <th><h2>Tags</h2></th>\n                                    <th><h2>Description</h2></th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    newEntries.concat(defaultEntryValues).map((entry, index) => (\n                                        <AddEntryRow\n                                            key={index}\n                                            entry={entry}\n                                            updateEntryCallback={updateEntry}\n                                            accounts={accounts}\n                                            removeEntry={removeEntry}\n                                        />\n                                    ))\n                                }\n                            </tbody>\n                        </table>\n                    </span>\n                    <Button className=\"modal__addAccount__content--submit\" onClick={addTransaction}><h2>Create</h2></Button>\n                </Card>\n            </div>\n        </Modal >\n    );\n}\n\ntype AddEntryRowProps = {\n    entry: Partial<Entry>\n    updateEntryCallback: Function,\n    accounts: Account[],\n    removeEntry: Function,\n}\n\nconst AddEntryRow: FunctionComponent<AddEntryRowProps> = ({ entry, updateEntryCallback, accounts, removeEntry }) => {\n    const [isStockType, setIsStockType] = useState(false);\n    const [showStockAmountModal, setShowStockAmountModal] = useState(false);\n\n    const toggleAmountType = () => {\n\n        if (!isStockType) {\n            setShowStockAmountModal(true);\n        }\n\n        if (entry.amount) {\n            const newDefault = !isStockType ? { symbol: \"\", quantity: 0, unitPrice: 0 } : 0;\n            updateEntryCallback({\n                id: entry.id,\n                amount: newDefault\n            });\n        }\n\n        setIsStockType(!isStockType);\n    }\n\n    const setStockAmount = (amount: StockAmount) => {\n        setShowStockAmountModal(false);\n        updateEntryCallback({\n            id: entry.id,\n            amount: amount\n        });\n    }\n\n    return (\n        <tr>\n            <td>\n                <select value={entry.accountId} onChange={(event) => updateEntryCallback({ id: entry.id, accountId: event.target.value })}>\n                    {\n                        accounts\n                            .map((account) => (\n                                <option key={account.id} value={account.id}>{account.parentAccountId}-{account.name}</option>\n                            ))\n                    }\n                </select>\n            </td>\n            <td>\n                <select value={entry.style} onChange={(event) => updateEntryCallback({ id: entry.id, style: Number.parseInt(event.target.value) as EntryStyle })}>\n                    {\n                        allEntryStyles\n                            .map((style) => (\n                                <option key={style} value={style}>{prettifyEnum(EntryStyle[style])}</option>\n                            ))\n                    }\n                </select>\n            </td>\n            <td>\n                <input type=\"checkbox\" checked={isStockType} onChange={() => toggleAmountType()} />\n                {\n                    isStockType ?\n                        (<p>\n                            {(entry.amount as StockAmount)?.quantity?.toString() || \"?\"}x{(entry.amount as StockAmount)?.symbol || \"?\"} @ ${(entry.amount as StockAmount)?.unitPrice || \"?\"}\n                        </p>) :\n                        (<input type=\"number\" value={entry.amount?.toString()} onChange={(event) => updateEntryCallback({ id: entry.id, amount: Number.parseFloat(event.target.value) })} />)\n                }\n                <StockAmountModal visible={showStockAmountModal} setVisible={setShowStockAmountModal} setAmountCallback={setStockAmount} />\n            </td>\n            <td>\n                <input type=\"date\" value={formatDateForInput(entry.date)} onChange={(event) => updateEntryCallback({ id: entry.id, date: new Date(Date.parse(event.target.value).valueOf() + 14400000).valueOf() })} />\n            </td>\n            <td>\n                <input type=\"text\" value={entry.category} onChange={(event) => updateEntryCallback({ id: entry.id, category: event.target.value })} />\n            </td>\n            <td>\n                <input type=\"text\" value={entry.tags?.join(\", \")} onChange={(event) => updateEntryCallback({ id: entry.id, tags: event.target.value.split(\", \") })} />\n            </td>\n            <td>\n                <input type=\"text\" value={entry.description} onChange={(event) => updateEntryCallback({ id: entry.id, description: event.target.value })} />\n            </td>\n            <td>\n                {\n                    entry.id ? (<Button onClick={() => removeEntry(entry.id)}><CloseOutlinedIcon /></Button>) : null\n                }\n            </td>\n        </tr >\n    );\n}","import React, { FunctionComponent, useEffect, useState } from 'react';\nimport { Transaction } from '../model/transaction';\nimport { Account } from '../model/account';\nimport { Sidebar } from '../components/sidebar';\nimport { client } from '../util/axios';\nimport { accountFromDynamoDB, entryFromDynamoDB, transactionFromDynamoDB } from '../util/parser';\nimport { Entry } from '../model/entry';\nimport SettingsOutlinedIcon from '@material-ui/icons/SettingsOutlined';\nimport { AddAccountModal } from '../components/addAccountModal';\nimport { Button } from '@material-ui/core';\nimport { TransactionTable } from '../components/transactionTable';\nimport { AddTransactionModal } from '../components/addTransactionModal';\n\nexport const HomePage: FunctionComponent = () => {\n    const [accounts, setAccounts] = useState<Account[]>([]);\n    const [entries, setEntries] = useState<Entry[]>([]);\n    const [transactions, setTransactions] = useState<Transaction[]>([]);\n\n    const [addAccountModalVisibility, setAddAccountModalVisibilty] = useState<boolean>(false);\n    const [addTransactionModalVisibility, setAddTransactionModalVisibility] = useState<boolean>(false);\n\n    useEffect(() => {\n        client.get('/api/')\n            .then((response) => {\n                let accounts: Account[] = [];\n                let transactions: Transaction[] = [];\n                let entries: Entry[] = [];\n\n                response.data.accounts.forEach((account: string) => {\n                    accounts.push(accountFromDynamoDB(account));\n                });\n\n                response.data.transactions.forEach((transaction: string) => {\n                    transactions.push(transactionFromDynamoDB(transaction));\n                });\n\n                response.data.entries.forEach((rawEntry: string) => {\n                    entries.push(entryFromDynamoDB(rawEntry));\n                });\n\n                setAccounts(accounts);\n                setTransactions(transactions);\n                setEntries(entries);\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n    }, []);\n\n    return (\n        <div className=\"app\">\n            <div className=\"app__header\">\n                <h1 className=\"app__header__text\">\n                    Sage\n                </h1>\n                <Button onClick={() => setAddAccountModalVisibilty(true)}>A<SettingsOutlinedIcon /></Button>\n                <Button onClick={() => setAddTransactionModalVisibility(true)}>T<SettingsOutlinedIcon /></Button>\n            </div>\n            <div className=\"app__content\">\n                <Sidebar />\n                <div className=\"app__content__main\">\n                    <TransactionTable\n                        accounts={accounts}\n                        entries={entries}\n                        transactions={transactions}\n                        updatedTransactionCallback={(transaction: Transaction) => { setTransactions(transactions.map((t) => t.id === transaction.id ? transaction : t)) }}\n                        updatedEntryCallback={(updatedEntries: Entry[]) => {\n                            setEntries(entries.map((entry) => {\n                                const updated = updatedEntries.find((updatedEntry) => updatedEntry.id === entry.id);\n                                return updated ? updated : entry;\n                            }))\n                        }}\n                    />\n                </div>\n            </div>\n            <AddAccountModal\n                visible={addAccountModalVisibility}\n                setVisible={setAddAccountModalVisibilty}\n                accounts={accounts}\n                newAccountCallback={(account: Account) => setAccounts(accounts.concat(account))}\n            />\n            <AddTransactionModal\n                visible={addTransactionModalVisibility}\n                setVisible={setAddTransactionModalVisibility}\n                accounts={accounts}\n                entries={entries}\n                transactions={transactions}\n                newTransactionCallback={(transaction: Transaction) => { transactions.length !== 0 ? setTransactions(transactions.concat(transaction)) : setTransactions([transaction]) }}\n                newEntryCallback={(newEntries: Entry[]) => { entries.length !== 0 ? setEntries(entries.concat(newEntries)) : setEntries(newEntries) }}\n            />\n        </div>\n    );\n}\n","import { Button } from '@material-ui/core';\nimport React, { FunctionComponent, useState } from 'react';\nimport { client, setAuthHeader } from '../util/axios';\n\ntype LoginPageProps = {\n    setPage: Function\n}\n\nexport const LoginPage: FunctionComponent<LoginPageProps> = ({ setPage }) => {\n    const [password, setPassword] = useState('');\n\n    const login = () => {\n        window.crypto.subtle.digest('SHA-256', new TextEncoder().encode(password))\n            .then((digestedHash) => {\n                const hashArray = Array.from(new Uint8Array(digestedHash));\n                const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n                console.log(hashHex);\n                client.post(\"/login\", {\n                    \"login_sha\": hashHex\n                }).then((response) => {\n                    setAuthHeader(response.data.access_token);\n                    setPage(\"HOME\");\n                    setPassword('');\n                });\n            })\n    }\n\n    return (\n        <div className=\"app\">\n            <div className=\"app__header\">\n                <h1 className=\"app__header__text\">\n                    Sage\n                </h1>\n            </div>\n            <div className=\"app__content\">\n                <div className=\"app__content__login\">\n                    <input type=\"password\" value={password} onChange={(event) => setPassword(event.target.value)} />\n                    <Button onClick={login}>Login</Button>\n                </div>\n            </div>\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport './styles/App.scss';\nimport './styles/svg.scss';\nimport { HomePage } from './pages/home';\nimport { LoginPage } from './pages/login';\n\nexport const App = () => {\n  const [page, setPage] = useState(\"LOGIN\");\n\n  return (\n    <>\n      {\n        (page === \"LOGIN\") ? (<LoginPage setPage={setPage} />) : null\n      }\n      {\n        (page === \"HOME\") ? (<HomePage />) : null\n      }\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}